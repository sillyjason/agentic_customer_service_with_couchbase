[
    {
        "appcode": "function OnUpdate(doc, meta) {\n    const docid = meta.id\n    log(\"Doc created/updated\", docid);\n\n    //check if the document is already tagged\n    const { \n        tags,\n        responded,\n        message\n    } = doc \n\n    // check if message is empty \n    if ( !message ) {\n        log(\"message is empty, returning\")\n        return \n    }\n\n    let newDoc = doc \n    // tag the doc \n    if ( !tags ) {\n        var request = {\n            path: '/metadata_tag',\n            params: {\n            },\n            body: {\n                \"message\": message,\n            }\n        };\n    \n        var response = curl('POST', endpoint, request);\n    \n        if (response.status == 200) {\n            log('successfully tagged doc..', docid)\n            var data = response.body;\n    \n            newDoc['tags'] = data \n            target[docid] = newDoc\n        }\n    \n        else { \n            log(\"Failed to tag metadata: \" + response.status + \" \" + response.body)\n        }\n    \n    }\n\n    if ( !responded ) {\n        var request = {\n            path: '/run_agents',\n            params: {\n            },\n            body: {\n                \"content\": message,\n                \"message_id\": docid\n            }\n        };\n    \n        var response = curl('POST', endpoint, request);\n        \n        if (response.status == 200) {\n            log('responded to message:', docid)\n            var data = response.body;\n\n            let currentDateTime = new Date();\n            let dateTimeString = currentDateTime.toString();\n\n            var response_obj = {\n                response: data.response,\n                message_id: docid,\n                time: dateTimeString\n            }\n\n            var uuid = \"ms_\" + docid\n               \n            try {\n                var new_meta = {\"id\": uuid};\n                couchbase.insert(target_response, new_meta, response_obj)\n                log(\"created new response object: \", uuid)    \n            }\n            catch (e) {\n                log(\"error inserting response object: \", e)\n            }\n\n            newDoc['responded'] = true\n            target[docid] = newDoc\n            log(\"updated doc with responded flag\")\n        }\n    \n        else { \n            log(\"Failed to tag metadata: \" + response.status + \" \" + response.body)\n        }\n    }\n\n    return \n}\n\nfunction OnDelete(meta, options) {\n    log(\"Doc deleted/expired\", meta.id);\n}\n",
        "depcfg": {
            "buckets": [
                {
                    "alias": "target",
                    "bucket_name": "main",
                    "scope_name": "data",
                    "collection_name": "messages",
                    "access": "rw"
                },
                {
                    "alias": "target_response",
                    "bucket_name": "main",
                    "scope_name": "data",
                    "collection_name": "message_responses",
                    "access": "rw"
                }
            ],
            "curl": [
                {
                    "hostname": "http://YOUR_IP_ADDRESS:5001",
                    "value": "endpoint",
                    "auth_type": "no-auth",
                    "username": "",
                    "password": "*****",
                    "bearer_key": "*****",
                    "allow_cookies": false,
                    "validate_ssl_certificate": false
                }
            ],
            "source_bucket": "main",
            "source_scope": "data",
            "source_collection": "messages",
            "metadata_bucket": "meta",
            "metadata_scope": "_default",
            "metadata_collection": "_default"
        },
        "version": "evt-7.6.1-3202-ee",
        "enforce_schema": false,
        "handleruuid": 3227046002,
        "function_instance_id": "XLGTc3",
        "appname": "process_message",
        "settings": {
            "dcp_stream_boundary": "from_now",
            "deadline_timeout": 62,
            "deployment_status": true,
            "description": "tag the ticket and create initial follow-ups",
            "execution_timeout": 120,
            "language_compatibility": "6.6.2",
            "log_level": "INFO",
            "n1ql_consistency": "none",
            "processing_status": true,
            "timer_context_size": 1024,
            "user_prefix": "eventing",
            "worker_count": 1
        },
        "function_scope": {
            "bucket": "*",
            "scope": "*"
        }
    }
]